{"version":3,"sources":["resource/img/background.jpg","resource/img/kistlogo.ico","container/Main.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Main","now","Date","then","gap","getTime","day","Math","abs","floor","className","style","backgroundImage","background","src","kistlogoIcon","alt","margin","width","href","Component","App","ref","title","height","frameBorder","border","allowFullScreen","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yGAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,8OCqC5BC,G,uLA3BP,IAAMC,EAAM,IAAIC,KACVC,EAAO,IAAID,KAAK,qBAChBE,EAAMH,EAAII,UAAYF,EAAKE,UAC3BC,EAAMC,KAAKC,IAAKD,KAAKE,MAAML,EAAG,QACpC,OACI,yBAAKM,UAAU,8DACXC,MAAO,CAACC,gBAAgB,gEAAiEC,IAAa,MACtG,yBAAKH,UAAU,iDACX,yBAAKA,UAAU,OAAOI,IAAKC,IAAcC,IAAI,UAGjD,yBAAKN,UAAU,qBACX,wBAAIA,UAAU,2BAAd,gBACA,wBAAIA,UAAU,iBAAiBC,MAAO,CAACM,OAAO,OAAOC,MAAM,SAC3D,uBAAGR,UAAU,uBAAb,kBACA,uBAAGA,UAAU,sBAAsBJ,EAAnC,eAGJ,yBAAKI,UAAU,0CAAf,cACe,uBAAGS,KAAK,4BAAR,gB,GAvBZC,cCuCJC,G,oOA5BX,OACE,yBAAKC,IAAI,YAAYZ,UAAU,aAC7B,iCACE,kBAAC,EAAD,OAEF,6BAASA,UAAU,YACjB,yBAAKA,UAAU,SACf,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SACb,8CACA,0DAGF,mQACA,kTACA,kKAIJ,iCACE,4BAAQa,MAAM,WAAWT,IAAI,6QAA6QI,MAAM,OAAOM,OAAO,OAAOC,YAAY,IAAId,MAAO,CAACe,OAAO,GAAIC,gBAAgB,W,GAhChXP,cCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpC,MAAK,SAAAqC,GACjCA,EAAaC,kB","file":"static/js/main.fc0b6267.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.9ccbbdbd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kistlogo.d861e2bc.ico\";","import React, {Component} from 'react';\nimport background from '../resource/img/background.jpg';\nimport kistlogoIcon from '../resource/img/kistlogo.ico';\nimport './Main.css'\n\n\nclass Main extends Component{\n\n    render(){\n        //calculate d-day\n        const now = new Date();\n        const then = new Date(\"december 13, 2019\");\n        const gap = now.getTime() - then.getTime();\n        const day = Math.abs( Math.floor(gap / (1000 * 60 * 60 * 24)));\n        return(\n            <div className=\"bgimg w3-display-container w3-animate-opacity w3-text-white\" \n                style={{backgroundImage:'linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url('+ background + ')'}}>\n                <div className=\"w3-display-topleft w3-padding-large w3-xlarge\">\n                    <img className=\"logo\" src={kistlogoIcon} alt=\"logo\"></img>\n                </div>\n\n                <div className=\"w3-display-middle\">\n                    <h1 className=\"w3-jumbo w3-animate-top\"> COMING SOON</h1>\n                    <hr className=\"w3-border-grey\" style={{margin:\"auto\",width:40+'%'}}></hr>\n                    <p className=\"w3-medium w3-center\"> Dec 13, 2019 </p>\n                    <p className=\"w3-large w3-center\">{day} days left</p>\n                </div>\n\n                <div className=\"w3-display-bottomleft w3-padding-large\">\n                    Powered by <a href=\"https://ejshim.github.io\">EJShim</a>\n                </div>\n                </div>\n        );\n    }\n\n};\n\nexport default Main;","import React, {Component} from 'react';\nimport Main from './container/Main';\nimport './App.css';\n\n\nclass App extends Component {\n\n\n  componentDidMount(){        \n   \n  }\n\n  \n\n\n  render(){\n\n    return (\n      <div ref=\"container\" className=\"container\">\n        <section>\n          <Main/>\n        </section>        \n        <section className=\"starwars\">\n          <div className=\"fade\"/>\n          <div className=\"crawl\">\n            <div className=\"title\">\n              <p>KIST Homecoming</p>\n              <h1>Friday the 13th, December</h1>\n            </div>\n\n            <p>드레스코드 무비스타 영화캐릭터\t베스트 드레서 선정  소정의상품 (소정이가 준비한 상품)</p>     \n            <p>장소\t\"SOULSOUP 소울숲\" (회기역 2번출구 5분거리)\t동대문구 휘경동 253-5 2층 (삼육서울병원 맞은편 / 본죽건물)\thttp://www.soulsoupspace.com</p>\n            <p>시간\t2019/ 12/ 13/ 금 7pm ~ 5am 참가비\t35000원 + 각자 마실 술(음료)…</p>\n\n          </div>\n        </section>\n        <section>\n          <iframe title=\"location\" src=\"https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d3695.1957656052987!2d127.05614041254037!3d37.58824303692843!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x357cbb6c7c8d3245%3A0x6d91e4dd74c9688d!2z7IaM7Jq47Iiy!5e0!3m2!1sko!2sgm!4v1573040435588!5m2!1sko!2sgm\" width=\"100%\" height=\"100%\" frameBorder=\"0\" style={{border:0}} allowFullScreen=\"\"></iframe>\n        </section>\n      </div>\n      \n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}