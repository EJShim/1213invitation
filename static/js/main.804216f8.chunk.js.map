{"version":3,"sources":["resource/img/background.jpg","resource/img/kistlogo.ico","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","now","Date","then","gap","getTime","day","Math","abs","floor","className","style","backgroundImage","background","src","kistlogoIcon","alt","margin","width","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,8NCyC5BC,G,oOA3BX,IAAMC,EAAM,IAAIC,KACVC,EAAO,IAAID,KAAK,qBAChBE,EAAMH,EAAII,UAAYF,EAAKE,UAC3BC,EAAMC,KAAKC,IAAKD,KAAKE,MAAML,EAAG,QAIpC,OACE,yBAAKM,UAAU,8DAA8DC,MAAO,CAACC,gBAAgB,gEAAiEC,IAAa,MACjL,yBAAKH,UAAU,iDACb,yBAAKA,UAAU,OAAOI,IAAKC,IAAcC,IAAI,UAG/C,yBAAKN,UAAU,qBACb,wBAAIA,UAAU,2BAAd,gBACA,wBAAIA,UAAU,iBAAiBC,MAAO,CAACM,OAAO,OAAOC,MAAM,SAC3D,uBAAGR,UAAU,sBAAsBJ,EAAnC,qBAGF,yBAAKI,UAAU,0CAAf,cACa,uBAAGS,KAAK,4BAAR,gB,GA7BHC,cCOEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM7B,MAAK,SAAA8B,GACjCA,EAAaC,kB","file":"static/js/main.804216f8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.9ccbbdbd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/kistlogo.d861e2bc.ico\";","import React, {Component} from 'react';\nimport background from './resource/img/background.jpg';\nimport kistlogoIcon from './resource/img/kistlogo.ico';\nimport './App.css';\n\nclass App extends Component {\n\n\n  componentDidMount(){\n  }\n\n\n  render(){\n    //calculate d-day\n    const now = new Date();\n    const then = new Date(\"december 13, 2019\");\n    const gap = now.getTime() - then.getTime();\n    const day = Math.abs( Math.floor(gap / (1000 * 60 * 60 * 24)));\n    \n\n\n    return (\n      <div className=\"bgimg w3-display-container w3-animate-opacity w3-text-white\" style={{backgroundImage:'linear-gradient(rgba(0, 0, 0, 0.7), rgba(0, 0, 0, 0.7)), url('+ background + ')'}}>\n        <div className=\"w3-display-topleft w3-padding-large w3-xlarge\">\n          <img className=\"logo\" src={kistlogoIcon} alt=\"logo\"></img>\n        </div>\n\n        <div className=\"w3-display-middle\">\n          <h1 className=\"w3-jumbo w3-animate-top\"> COMING SOON</h1>\n          <hr className=\"w3-border-grey\" style={{margin:\"auto\",width:40+'%'}}></hr>\n          <p className=\"w3-large w3-center\">{day} days left 12.13</p>\n        </div>\n\n        <div className=\"w3-display-bottomleft w3-padding-large\">\n          Powered by <a href=\"https://ejshim.github.io\">EJShim</a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}